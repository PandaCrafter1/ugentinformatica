fold -w(getal)
    splitst op de breedte "getal" met \n's

bc van een tekstbestand geeft de berekening terug

tr "A" "B"
    vervangt A (letter per letter, op overeenkomstige positie in 2e verzameling) door B
    bv. tr "0123" "ABCD" (vervangt 0 door A, 1 door B etc...)

sed 's/A/B/d'
    A wordt vervangen door B op lijn d, om globaal te vervangen gebruikt men ook wel g
    B kan \t bevatten waar t een nummer is van de t-de regex in A

paste file1 file2
    met -d wordt een argument meegegeven wat tussen de 2 files wordt gezet (lijn per lijn)
    by default is het argument op -d (als er geen wordt meegegeven) een TAB

for each in bash:
for a in "$@"          (voor alle a in de argumenten $@)
do
    #statements
done

exit n
    maakt de exit status n (0,1,2...)

if [ conditie ] !!!LET OP MET DE SPATIES, NODIG BIJ DE HAAKJES ROND DE CONDITIE
        then
        #statements
    elif [ conditie ]
        then
        #statements
    else
        #statements
    fi
    
    
voorbeelden if(verwerking argumenten)

[[ ! -f $1 || ! -r $1 ]] argument 1 is geen bestand of niet leesbaar, analoog -d, != *.svg (checken op extensies)
zie ook http://wiki.bash-hackers.org/commands/classictest voor alle mogelijke tests


variabele declaratie !!! LET OP MET DE SPATIES, HIER MOGEN ZE NIET!
    var=iets (alles is string based in bash)
    declare -i var=0 #bash ziet nu deze variabele als een integer, var+=42 is nu geldig en geeft 42 als output
echo "$var" geeft 'iets' , je kan ook commando output in een variabele steken: var=$(commando | commando...)
via set -- $(commando | commando... ) geeft $1, $2,.. de waarde van de output gesplit op spaties 
bv set -- $(sed -n "$3"p "$2") , het sed commando geeft 3 velden V1 V2 V3 met spaties tussen, dan wordt $1 V1, $2 V2, $3 V3

functie_naam(){
    #statements
    }
function naam {
    #statements
    }
voorbeeld om error functie te maken als je hem meermaals zou nodig hebben:
function error() {
        echo "Syntaxis: inkleuren svg-bestand csv-bestand" 1>&2  (uitschrijven naar standaarderror)
}

while [ conditie ] !!!LET OP MET DE SPATIES, NODIG BIJ DE HAAKJES ROND DE CONDITIE
    do
    #statements
    done
bv while lus met getal:
  i=5
 while(( i > 3 )) ; do   (dubbele haakjes voor getal-expressie, alternatief is while [ $i -gt 3 ] ; do    #analoog -lt, ...
 
 for-lus met seq : 
 for i in `seq 1 10`;
        do
                echo $i
        done   
xargs kan gebruikt worden om de beginspatie te verwijderen

getopts ":a:bc:"
    : vooraan om eigen error-afhandeling te kunnen doen | neemt alle opties a b en c waar a en c een argument hebben

case "$opt" in
    a ) #statements
        ;;
    b ) #statements
        ;;
    c ) #statements
        ;;
    \? ) #statements (als er een optie wordt gegeven die niet abc is)

    esac
    shift $((OPTIND -1))
        schuift de opties op na de case

join -t $'\t' file1 file2
    joint de 2 bestanden op de \t

input redirection to file
    tee testFile &>/dev/null
