Ontcijfer (Winnie) 

#! /bin/bash
boodschap=""
if [ $# -lt 2 ] || [ ! -r $1 ]; then
        echo "Syntaxis: $(basename $0) FILE CODE [code]..." 1>&2
        exit 1
fi
bestand=$1
shift
for code in "$@" ; do
        afkorting=$(echo "$code" | tr -d "0-9")
        plaats=$(($(echo "$code" | tr -d "A-Z")-1))
        naam=$(egrep ",$afkorting$" $bestand | cut -f1 -d"," | tr -d "[[:punct:]] ")
        if [[ ! $code =~ [A-Z]+[0-9]+$ ]] || [[ -z $naam ]] || [[ $plaats -gt ${#naam} ]] ; then
                echo "$(basename $0):ongeldige code:$code" 1>&2
                exit 2
        fi
        boodschap+=$(echo "${naam:$plaats:1}" | tr "a-z" "A-Z")
done
echo "$boodschap"
exit 0

Zwaluwstaart (credits Jasper)

#! /bin/bash
function argumentError {
  echo "Syntaxis: zwaluwstaart [-ks] [-r COLOR] [-z COLOR] FILE FILE" >&2
  exit 1
}
function getColor {
  # getColor CARD 
  #checkt in meegegeven argument ($1 dus) of de letter op de laatste plaats een c of s is via ${#} lengte -1 
  if [ "${1:$((${#1}-1)):1}" == 'C' -o "${1:$((${#1}-1)):1}" == 'S' ]; then
    echo "$zwart"
  else
    echo "$rood"
  fi
}
function writeCard {
  result="$1"
  if [ "$printDeck" -eq 1 ]; then
    result="$((1 + $curfile)):$result" #bestandnummer aanplakken, is getal ofwel 0 ofwel 1 dus nog eens +1 
  fi
  if [ "$printColor" -eq 1 ]; then
    result="$result:$(getColor $1)" #kleur aanplakken via bovenstaande methode
  fi
  echo "$result" #uitschrijven naar stdout
}

rood="rood"
zwart="zwart"
printDeck=0 #lokale variabelen initialiseren
printColor=0

while getopts ":skr:z:" opt; do
  case $opt in
    s)
      printDeck=1
      ;;
    k)
      printColor=1
      ;;
    r)
      rood=$OPTARG
      ;;
    z)
      zwart=$OPTARG
      ;;

    \?)
      argumentError #Error uitschrijven via functie, nogal overbodig alst maar 1x gebruikt wordt maar ja stylish
      ;;
  esac
done

shift "$((OPTIND-1))"
exec 3< "$1"  #eerste bestand koppelen aan filedescriptor 3 , analoog voor bestand 2
exec 4< "$2"

filedesc=(3 4)  #array maken om de bestanden te kunnen koppelen aan ofwel 0 ofwel 1
curfile=0 #eerste bestand om te lezen is dat op plaats 0 , dus gekoppeld aan filedesc 3, dus $1

while :; do  #while-true loop die enkel stopt als beide bestanden volledig gelezen zijn aka als een exit gebeurt (: en true geven allebei
#infinite true terug tot je exit)
    read -r -u${filedesc[$curfile]} card; #u-vlag om te lezen van een file gekoppeld aan een filedescriptor
    if [ $? -ne 0 ]; then 
      # encountered end of file, swich sides and print rest of the other file
      curfile=$(( 1 - $curfile )) #indie curfile 1, wordt 0, anders 1 => switchen tussen filedescriptors
      while :; do
        read -r -u${filedesc[$curfile]} card;
        if [ $? -ne 0 ]; then #tweede bestand is ook volledig gelezen
          exit 0
        fi
        if [ ! -z "$card" ]; then
          # skip empty lines
          writeCard "$card" #functie oproepen met gelezen regel
        fi
      done
    fi
    if [ -z "$card" ]; then
      # na lege regel begin je uit het andere bestand te lezen, dit blijf je doen totdat een bestand volledig gelezen is
      curfile=$(( 1 - $curfile ))
    else
      writeCard "$card"
    fi
done
