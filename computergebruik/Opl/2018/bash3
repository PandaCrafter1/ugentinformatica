==introductie==
#!/bin/bash

echo "Content-type: text/plain" #CGI-intro voor browser

echo


echo $QUERY_STRING | tr "&" "\n" | sed 's/\([^&]*\)=/De waarde van \1 is /g' #argumenten splitsen regel per regel en omzetten

==gegroet==
#!/bin/bash

echo "Content-type: text/plain"     #to-do : iemand die dit uitlegt

echo

for p in ${QUERY_STRING//&/ };do             #splits input op basis van &'s en doe voor elk:
kvp=( ${p/=/ } );                            #maak array op basis van =-teken, deel ervoor op pos0, deel erna op pos 1
k=${kvp[0]}                                  #steek waarden in een variabele, k wordt bijvoorbeeld naam, v is de naam die gebruikt werd
v=${kvp[1]}
eval $k=$v                                   #doet naam-expansie, de zin wordt dan naam=Dieter, door eval wordt die waarde in de variabele gestoken
done

echo Gegroet, $naam                          #die $naam wordt dan hier gebruikt(kan dus geen 2 juiste namen displayen maar werd niet getest op Dodona

#! /bin/bash

echo "Content-type: text/plain"   #CGI-intro
echo ""

echo "$QUERY_STRING" | sed 's/naam=\([a-zA-Z]\+\)/Gegroet, \1/g' | tr "&" "\n" | sed '/^[^G]/d'  
#argumenten omzetten naar Gegroet, splitsen regel per regel, als ze niet beginnen met G(egroet) moeten ze weg
 
exit 0

Inkleuren
#! /bin/bash

bestand=$(echo "$1" | sed 's/.svg/.png/')

#door refactoring zijn error_svg en error_csv niet nuttig om apart te definiëren maar ik laat ze staan als voorbeeld voor functies

# defineer de error messages
function error() {
        echo "Syntaxis: $(basename $0) svg-bestand csv-bestand" 1>&2
}

function error_svg() {
        echo "Fout: onbestaand, onleesbaar of ongeldig svg-bestand: $1" 1>&2
}
function error_csv() {
        echo "Fout: onbestaand, onleesbaar of ongeldig csv-bestand: $1" 1>&2
}

# bekijk de argumenten en doe iets
case $# in
        2)
                if [ ! -r $1 ] #checkt zowel op bestaan als op leesbaarheid
                then
                    error_svg $1
                    error
                    exit 2
                fi
                if [ ! -r $2 ] #checkt zowel op bestaan als op leesbaarheid
                then
                     error_csv $2
                     error
                     exit 3
                fi
;;
        *)
        error
        exit 1
;;
esac

cp $1 tempkleurenbestand.svg #opslaan in temp-bestand om oorspronkelijk niet aan te passen

while read line
do
    id=$(echo $line | sed 's/,.*//')
    kleur=$(echo $line | sed 's/.*,//')
    sed -i 's/\(id="'$id'"\)/\1 style="fill:'$kleur';"/' tempkleurenbestand.svg  #in-file substitution
done <<< "$(tail -n +2 $2)"  #alles behalve eerste regel inlezen

convert svg:tempkleurenbestand.svg png:$bestand  #omzetten naar png #captain obvious
rm tempkleurenbestand.svg  #garbage cleanup
exit 0




Inkleuren CGI

#! /bin/bash 

echo "Content-type: text/html"  #CGI intro zoals nodig is
echo

cp amerika.svg tempkleurenbestand.svg  #werkwijze analoog aan hierboven, bestand kopiëren om te gebruiken
echo "$QUERY_STRING" | tr "&" "\n" > tempkleur #argumenten splitsen regel per regel in apart bestand

lines=$(cat tempkleur | wc -l)  #analoog werken zoals hierboven, regel per regel id en kleur bepalen en aanpassen

for line in $(cat tempkleur | tail -$lines)
do
        id=$(echo $line | sed 's/=.*//')
        kleur=$(echo $line | sed 's/.*=//')
        sed -i 's/\(id="'$id'"\)/\1 style="fill:'$kleur'"/I' tempkleurenbestand.svg
done
cat tempkleurenbestand.svg  #html-bestand openenen voor dodona, garbage cleanup erna
rm tempkleurenbestand.svg
rm tempkleur
exit 0
