Broncode
<--verkeerd-->
find $1 -type f | grep $2 | xargs grep -n "$3"
<--juist versie-->
    find $1 -type f -print | grep "\.$2" | xargs grep -Hn $3

find "$1" -name "*\.$2" -type f | xargs grep -Hn "$3"
ipv grep op juiste naam, deze onmiddellijk verwerken, vervolgens met grep -Hn(H = filename printen, n = regelnummer uitprinten)


Narcistische getallen
echo $1 | sed 's/./&^$2+/g' | sed 's/+$//' | bc
    #elk digit vervangen door zichelf tot de macht $2 met een +, de laatste ten slotte verwijderen en vervolgens uitrekenen

echo $1 | fold -w1 |tr '\n' '.' | sed 's/\./^'$2'+/g' | sed 's/\+$/\n/' | bc
    #hier moeten we nog een tr gebruiken omdat we merkten dan de \n niet in de sed werkte
    #fold -w{getal} is op width {getal} splitsen met \n's
    #de bc op het einde maakt een calculatie van de voorgaande tekst

Zeg het met Adele

paste -d "@" $1 $2 | sed 's/@/\n>>>/g' | sed 's/^\(>.*\)/\1<<</g'
    #het commando paste 'plakt' 2 bestanden aan elkaar, lijn per lijn gescheiden door een TAB
        #de flag -d geeft (een of meerdere) karakters mee om ipv de TAB te zetten
        #hier gebruiken we een @, maar andere tekens zonder speciale betekenissen in Bash
        #konden ook makkelijk werken
    #de eerste sed voegt ipv de @ een \n en een >>> toe,
        #de 2e maakt bij die ^>.* op het einde nog een <<<
        <---alternatief met file descriptor (even effeicient)-->
        exec 3<$1
        exec 4<$2

        while read regel1 0<&3
        do
        echo $regel1
        read regel2 0<&4
        echo ">>>"$regel2"<<<"
        done

Woordkubus

#! /bin/bash
paste -d "@" words words | egrep -i "^([a-z]){4,9}@" | egrep -i "$5" > temp_file
    #het commando paste 'plakt' 2 bestanden aan elkaar, lijn per lijn gescheiden door een TAB
        #de flag -d geeft (een of meerdere) karakters mee om ipv de TAB te zetten
        #hier gebruiken we een @, maar andere tekens zonder speciale betekenissen in Bash
        #konden ook makkelijk werken
    #het 1e greppen gebeurt op 4-9 letters met er net na een @
    #het 2e greppen gebeurt op de 5e letter (diegene die in het midden van het vierkant staat)
        #omdat deze in elke oplossing mmoet zitten
        #al het greppen gebeurt met de flag -i, om case-insensitive te greppen
    #dit wordt voor later in het script uitgeschreven naar een temp_file
    for letter in "$@" ;
        #deze for gaat over alle argumenten, $@ stijgt elke keer de lus doorlopen wordt
            #we hernoemen het argument dat we gebruiken naar letter omdat $@ in de for kan veranderen
        do
            cat temp_file | sed 's/'$letter'\(.*@\)/\1/I' > temp_file2
                #verwijdert elk eerste voorkomen van de huidige letter voor de @ en
                    #schrijft het resultaat uit naar een nieuwe temp_file
            cat temp_file2 > temp_file
                #schrijft het veranderde bestand uit naar de eerste temp_file
                    #die opnieuw gebruikt wordt op het begin van de lus
        done
cat temp_file | egrep "^@" | sed 's/@//' | sort --ignore-case
    #de eerste temp_file wordt uitgeschreven, dan worden de lijnen gegrept (is dit zelfs een woord)
        #die beginnen met een @ (waar dus alle letters verwijdert waren en dus het antwoord klopt)
        #die @ verwijderen we erna met een sed omdat het niet meer nodig is
    #op het einde doen we een sort met als flag --ignore-case, om hoofdlettergevoeligheid uit te schakelen
rm temp_file*
    #we verwijderen het tijdelijk bestand omdat het tijdelijk is
exit 0
    #we sluiten af met een exit status 0 om het script te sluiten

<---> Alternatieve woordkubus zonder temp files <--->

#!/bin/bash
# De output van het commando dat volgt op de "done <<<" (onderaan de while loop) wordt de input van de while loop.
# Door het "read" commando vooraan leest de loop telkens één regel in van standaard input
# en kent deze regel toe aan de variabele "line".
while read line
do
        for letter in $@
        do
        line=$(echo "$line" | sed "s/\([^$letter]*\)$letter\(.*\) \(.*\)/\1\2 \3/I")
        done
        echo $line | egrep -v ' '
done <<< "$(egrep -i "$5" words | egrep ".{4,9}" | egrep -i "^[$1$2$3$4$5$6$7$8$9]*$" | sed 's/^\(.*\)$/\1 \1/Ig' | sort -f )"
exit 0


Vrienden bezoeken

if [ $(($1%4)) -eq 1 ]
then
echo "A"
elif [ $(($1%4)) -eq 2 ]
then
echo "C"
elif [ $(($1%4)) -eq 3 ]
then
echo "B"
elif [ $(($1%4)) -eq 0 ]
then
echo "D"
fi
exit 0
    <--Kortere notatie, leunt wel opdezelfde techniek. we gaan gewoon met een array werken waardoor al de if clauses wegvallen-->
    var=$(echo "($1%4)-1" | bc)
    array=(A C B D)
    echo ${array["$var"]}


Maya-getallen (deze code is het meest trash, want die dollarteken-numerieke expressie syntax is funky, dus als iemand dit wil refactoren
doe gerust ;) )

#! /bin/bash
sum=0
factor=$#
stuksom=0   #stuksom=waarde van argument voor vermenigvuldiging met bepaalde factor
for maya in "$@"; do
        waarde=1
        stuksom=$(echo -n "$maya" |tr "S" "0" | sed 's/\./1\+/g' | sed 's/\-/5\+/g' | sed 's/\(.*\)+$/\1/' | xargs echo | bc) #bepalen van waarde van argument
        i=$factor
        while(( i > 3 )) ; do
                waarde=$((waarde * 20))
                i=$((i-1))  #waarde * 20 tenzij het 'plaats' 3 heeft
        done
        if [ $((i%3)) -eq 0 ] ; then
                waarde=$((waarde * 360)) #'plaats' 3 => * 360
        elif [ $((i%2)) -eq 0 ] ; then
                waarde=$((waarde*20)) #'plaats' 2 => slechts *20
        fi
        sum=$((waarde * stuksom + sum)) #correcte factor toepassen op waarde en bijtellen bij de som
        factor=$((factor-1)) #volgende argument staat 1 'dichter'
        done
echo "$sum"
exit 0
    <--alternatieve versie van mayagetallen-->
    aantal=$(($#-1))
    array=( 1 20 360 7200 144000 2880000 )
    som=0
    for argument in $@
    do
    tussenResultaat=$(echo $argument | tr 'S' '0' | sed "s/\./1\+/g" | sed "s/\-/5\+/g" | sed "s/\+$//" | bc)
    som=$(echo "$som + (${array[$aantal]} * $tussenResultaat)" | bc)
    aantal=$((aantal-1))
    done
    echo $som

