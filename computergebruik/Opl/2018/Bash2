== Palindroom ==
# Refactoren is wel nog beetje nodig. 
# something something spaghetti code...

#!/bin/bash
string="$2"
index="0"
counter=${#string}
match=""
if [ "$1" == "omgekeerd" ]
then
        echo "$2" | rev | tr "ATGC" "TACG"
elif [ "$1" == "langstePalindroom" ]
then
        while [ "$index" -lt ${#string} ]
        do
                while [ "$counter" -gt "0" ]
                do
                        if [ ${string:$index:$counter} = $(bash "$0" "omgekeerd" "${string:$index:$counter}") ]
                        then
                                match=${string:$index:$counter}
                                if [ ${#match} -gt ${#longestmatch} ]
                                then
                                        longestmatch=$match
                                fi
                        fi
                        counter=$(($counter - 1))
                done
                index=$(($index + 1))
                counter=$((${#string} - $index))
        done
        echo $longestmatch
else
        echo "Ongeldige functie" 1>&2
        exit 1
fi

--Alternatieve versie, met minder lussen en if's, sneller op dodona (dubbel)--
    omgekeerd(){
        echo "$1" | rev | tr ACTG TGAC
        }

    palindroom() {
        string="$1"
        index=0
        length=${#string}
        stringLength=${#string}
        match=""
        longestmatch=""

        while [[ "$index" -lt ${#string} ]]
            do
                while [ "$length" -gt ${#longestmatch} ]
                do
                    if [ ${string:$index:$length} = $( omgekeerd "${string:$index:$length}") ]
                    then
                        longestmatch=${string:$index:$length}
                        maxLength=${#longestmatch}
                    fi
                    ((length --))
                done
                ((index++))
                ((length = stringLength - index))
            done
        echo $longestmatch
    }

    if [ $1 = 'omgekeerd' ]
        then
        omgekeerd $2
    elif [ $1 = 'langstePalindroom' ]
        then
        palindroom $2
    else
        echo 'Ongeldige functie' 1>&2
        exit 1
    fi
== De schat van Fenn ==
stop=$1
dir=$2
nextFile=$3
line=$4

cd $dir
while [[ "$lastWord" != "$stop" ]]
do
    file=$nextFile
    sentence="${sentence} ${lastWord}"
    lastWord=$(sed -n ${line}p $file| cut -d " " -f1)
    nextFile=$(sed -n ${line}p $file| cut -d " " -f2)
    line=$(sed -n ${line}p $file| cut -d " " -f3)
done
echo "$sentence" | xargs

##sneller alternatief met set --
#! /bin/bash
stop=$1
schat=''
cd "$2"
shift
while [ "$1" != "$stop" ]
do
        set -- $(sed -n "$3"p "$2")             ## alternatief met while-lus met 1 iteratie @Hackerman if [ "$1" != "$stop" ] ; then
         schat+="$1 "                                                                             ##             schat+="$1 "
done                                                                                              ##    fi
echo "$schat" | sed 's/ '$stop' //'                             dan moet enkel spatie op einde weg##echo "$schat" | sed 's/ $//'
exit 0

Repogen (git generator) mannekes wat een zooi was dat, miss is refactoren mogelijk maar idk

#! /bin/bash
i=0
merge=0
naam=''
amount=3
while getopts ":c:b:m" opt; do
        case "$opt" in
        c ) amount=$OPTARG #basisaantal commits is 3, indien c-vlag opgegeven wordt, moet het nummer aangepast worden
                ;;
        b ) naam=$OPTARG   #branchnaam opslaan, ik hou een teller bij voor als iemand zou willen mergen zonder branch op te geven
            ((merge++))
                ;;
        m ) ((merge++))   #kwestie dat de m-vlag iets doet lel
                ;;
        \? ) echo "Syntaxis: repogen [-b <string>] [-c <integer>] [-m] dirname" 1>&2  #error uitschrijven als syntax fout is
                exit 1
        esac
done
shift $((OPTIND -1))
if [ $# -eq 1 ]    #er moet een naam meegegeven worden om de git-directory mee te initialiseren, maar zo'n directory mag nog niet bestaan
then                    # alle output naar /dev/null via &> /dev/null

        if [ -d $1 ]
        then
                echo "repogen: bestandsnaam bestaat reeds" 1>&2
                exit 2
        else
                git init $1 &> /dev/null
                cd $1
                touch README.md
                git add README.md &> /dev/null
                git commit -m "initial commit" &> /dev/null
                if [[ ! -z $naam ]]                             #als een branchnaam werd meegegeven, deze aanmaken en daarop committen
                then
                        git checkout -b $naam &> /dev/null
                fi
                while (( i < $amount )) ; do
                        wget whatthecommit.com/index.txt -q                   #site downloaden, gaat in index.txt bestand
                        mesg=$(cat index.txt )                                #mesg opslaan en gebruiken in commit en dergelijk
                        ((i++))
                        echo "$i) $mesg" >> README.md
                        git commit -a -m "$mesg" &> /dev/null
                        rm index.txt                           #index-bestand verwijderen want in volgende doorloop van lus maak je een nieuw
                        done
                if [ $merge -eq 2 ] ; then
                        git checkout master &> /dev/null               #branch mergen met master als branch bestaat EN merge vlag werd meegegeven.
                        git merge $naam &> /dev/null
                fi
        fi
else
echo "Syntaxis: repogen [-b <string>] [-c <integer>] [-m] dirname" 1>&2
exit 1
fi
exit 0


=== oplossing uitslover ===
# Code wat slordig maar efficient genoeg (0.5s)

#!/bin/bash
# Initializing values
optionamount="0"
counter2="0"
counter="0"
emmy="0"
grammy="0"
oscar="0"
tony="0"
string1="NAAM ACTEUR""@"
string2="===========""@"
# Checking options, arguments and creating header.
while getopts ":EGOT" option
do
        ((optionamount+=1))
        case $option in
        E )
                ((emmy+=1))
                ;;
        G )
                ((grammy+=1))
                ;;
        O )
                ((oscar+=1))
                ;;
        T )
                ((tony+=1))
                ;;
        \? )
                echo "Syntaxis: uitslover -EGOT" 1>&2
                exit 1
                ;;
        esac
done
shift $((OPTIND-1))
if  [ "$optionamount" -le "1" ]
then
        echo "uitslover: minder dan twee awards opgegeven" 1>&2
        exit 2
elif [ "$1" != "" ]
then
        echo "Syntaxis: uitslover -EGOT" 1>&2
        exit 1
fi
for option in $emmy $grammy $oscar $tony
do
        ((counter+=1))
        case $counter in
        1 )
                name="emmy"
                ;;
        2 )
                name="grammy"
                ;;
        3 )
                name="oscar"
                ;;
        4 )
                name="tony"
                ;;
        esac
        if [ "$option" -eq 1 ]
        then
                ((counter2+=1))
                fileArray[$counter2]="$name"".txt"
                sort "${fileArray[$counter2]}" -o "${fileArray[$counter2]}"
                string1+="$(echo $name | tr 'a-z' 'A-Z')""@"
                for value in $(seq 1 "${#name}")
                do
                        string2+="="
                done
                string2+=$"@"
        elif [ "$option" -ge "2" ]
        then
                echo "Syntaxis: uitslover -EGOT" 1>&2
                exit 1
        fi
done

# String1 is header 1. (NAAM ACTEUR...)
# String2 is header 2. (==== ======...)
# Verander alle @'s in de strings naar tabs. Ik had @'s gebruikt als scheidingsteken voor het gemak.

string1=$(echo "$string1" | tr '@' '\t')
string2=$(echo "$string2" | tr '@' '\t')

# Neem de laatste tab weg, want op na de laatste kolom moet geen tab

string1=$(echo -e "${string1}" | sed -e 's/[[:blank:]]*$//')
string2=$(echo -e "${string2}" | sed -e 's/[[:blank:]]*$//')

# Schrijf de header uit naar standaard output

echo "$string1"
echo "$string2"

# in de fileArray zitten de namen van de files waarvan de jaarkolom moet worden afgeprint. 
# Als er 4 opties meegegeven zijn dan wordt het eerste algoritme gebruikte etc...
# de "-t$'\t' zorgt er voor dat het scheidingsteken een tab is.
# de "-" in de tweede en derde join geef aan dat daar de output van het vorige commando wordt gebruikt om te joinen.
# wanneer de command "bash uitslover.txt -EGOT" is wordt dus hetvolgende gedaan:
# join (met tabs) emmy.txt grammy.txt | join (met tabs) J(emmy.txtgrammy.txt) oscar.txt | join (met tabs) J(emmy.txtgrammy.txt.oscar.txt) tony.txt
# als dat voorbeeld het duidelijker maakt.

if [ "$optionamount" -eq "4" ]
then
        join -t$'\t' "${fileArray[1]}" "${fileArray[2]}" | join -t$'\t' - "${fileArray[3]}" | join -t$'\t' - "${fileArray[4]}"
elif [ "$optionamount" -eq "3" ]
then
        join -t$'\t' "${fileArray[1]}" "${fileArray[2]}" | join -t$'\t' - "${fileArray[3]}"
elif [ "$optionamount" -eq "2" ]
then
        join -t$'\t' "${fileArray[1]}" "${fileArray[2]}"
fi
exit 0


Uitslover door Wim Onderbeke

#!/bin/bash
emmy=0
grammy=0
oscar=0
tony=0
awardcounter=0
while getopts ":EGOT" opt
do
        case $opt in
                E)      (( emmy++ ))
                        ;;
                G)      (( grammy++ ))
                        ;;
                O)      (( oscar++ ))
                        ;;
                T)      (( tony++ ))
                        ;;
                \?)     echo "Syntaxis: uitslover -EGOT" 1>&2
                        exit 1
                        ;;
        esac
done
shift $((OPTIND-1))
if [ $# -gt 0 ]
then
        echo "Syntaxis: uitslover -EGOT" 1>&2
        exit 1
fi
if [ $((emmy + grammy + tony + oscar)) -le 1 ]
then
        echo "uitslover: minder dan twee awards opgegeven" 1>&2
        exit 2
fi
for award in emmy grammy oscar tony
do
        # dubbele expansion $award=emmy ${!award}=waarde van emmy; zorgt dage geen extra loop nodig hebt
        if [ ${!award} -ge 2 ]
        then
                echo "Syntaxis: uitslover -EGOT" 1>&2
                exit 1
        elif [ ${!award} -eq 1 ]
        then
                if [ $awardcounter -eq 0 ]
                then
                        cat "$award.txt" | sort -t$'\t' -k1 > "$$.tmp"
                        commando="cat $$.tmp"
                        (( awardcounter++ ))
                        header="NAAM-ACTEUR\t$(echo $award| tr 'a-z' 'A-Z')"
                else
                        sorted+=("<(sort $award..)")
                        commando="${commando}|join -t$'\t' - ${sorted[$((awardcounter-1))]}"
                        (( awardcounter++ ))
                        header+="\t$(echo $award| tr 'a-z' 'A-Z')"
                fi
        fi
done
echo -e "$header"| tr '-' ' '
echo -e "$header" |tr 'A-Z-' '='
echo "$commando" |sed 's/\.\./.txt/g'| bash
rm "$$.tmp"
exit 0


